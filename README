# Custom Game Engine

A lightweight, component-based 3D game engine built in C++ using OpenGL, designed to support flexible scene composition and modular game objects.

## Features

- **Component-Based Architecture**  
  Reusable modules such as `MeshRenderer`, `MeshCollider`, and `Transform` allow flexible attachment to game objects.

- **Mesh Rendering**  
  Supports loading and rendering 3D meshes with vertex buffers and element buffers.

- **Collision Detection**  
  Implements SAT (Separating Axis Theorem) for precise collision detection between convex meshes.

- **Transform System**  
  Hierarchical transforms with support for position, rotation (quaternion), and scaling. Supports parent-child relationships.

- **Modularity & Reusability**  
  Components can be attached or removed from game objects at runtime for flexible behavior composition.

- **World & Local Space Handling**  
  Vertices, edges, and normals properly transformed from local to world space for rendering and physics.

## Installation

1. Clone the repository:
    ```bash
    git clone https://github.com/yourusername/custom-game-engine.git
    ```
2. Ensure you have OpenGL, GLFW, GLAD, and GLM installed.
3. Compile the engine using g++:
    ```bash
    g++ -c C:\glad\src\glad.c -I"C:\glad\include" -o glad.o
    g++ -c ./*.cpp ./components/*.cpp -I"C:\glfw-3.4-win\include" -I"C:\glad\include"  -I"C:\glm-1.0.1"
    ```
4. Link object files
    ```bash
    g++ main.o glad.o MeshRenderer.o Mesh.o Box.o Object.o Transform.o Camera.o component.o CollisionSystem.o Collider.o MeshCollider.o -o main -L"C:\glfw-3.4-win\lib-mingw-w64" -lglfw3 -lopengl32 -lgdi32
    g++ *.o -o main -L"C:\glfw-3.4-win\lib-mingw-w64" -lglfw3 -lopengl32 -lgdi32
    ```bash
## Usage

```cpp
#include "Object.h"
#include "MeshRenderer.h"
#include "MeshCollider.h"
#include "Mesh.h"

int main() {
    Object box;
    box.AddComponent<MeshRenderer>();
    box.AddComponent<MeshCollider>();

    MeshRenderer* mr = box.GetComponent<MeshRenderer>();
    MeshCollider* mc = box.GetComponent<MeshCollider>();

    mr->setMesh(new Mesh());
    mc->setMesh(new Mesh());

    box.transform->position = glm::vec3(0.0f, 0.0f, 0.0f);
    box.transform->rotation = glm::quat(glm::radians(glm::vec3(0.0f, 45.0f, 0.0f)));

    // Render loop...
}
